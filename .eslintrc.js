module.exports = {
  root: true,
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
      },
    },
  },
  extends: [
    '@react-native',
    'prettier',
    'airbnb',
    'airbnb/hooks',
    'airbnb-typescript',
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:prettier/recommended',
    'plugin:@typescript-eslint/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: './tsconfig.json',
  },
  plugins: ['@typescript-eslint', 'react', 'prettier'],
  rules: {
    'prettier/prettier': 'error',
    'react/prop-types': 'off',
    'import/no-extraneous-dependencies': ['off', { devDependencies: true }],
    'import/extensions': [
      'error',
      'ignorePackages',
      {
        js: 'never',
        jsx: 'never',
        ts: 'never',
        tsx: 'never',
      },
    ],
    curly: ['error', 'all'],
    'react/jsx-curly-brace-presence': ['off'],
    'no-console': 'off',
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': 'off',
    'global-require': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-use-before-define': 'off',
    'lines-between-class-members': 'off',
    '@typescript-eslint/lines-between-class-members': 'error',
    '@typescript-eslint/ban-ts-comment': 'off',
    'react/jsx-props-no-spreading': 'off',
    'react/destructuring-assignment': 'off',
    'react/require-default-props': [
      0,
      {
        forbidDefaultForRequired: false,
        classes: 'ignore',
        functions: 'ignore',
        ignoreFunctionalComponents: false,
      },
    ],
    'import/prefer-default-export': ['off', { target: 'any' }],
    'consistent-return': ['off'],
    'react/no-unstable-nested-components': 'off',
    'react/no-array-index-key': 'off',
    'no-restricted-syntax': 'off',
    'no-param-reassign': ['error', { props: false }],
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: ['function'],
        format: ['PascalCase'],
        filter: {
          regex: '^[A-Z][a-z]+(?:[A-Z][a-z]+)*$|middleware',
          match: false,
        },
        prefix: [
          'get',
          'set',
          'post',
          'change',
          'update',
          'make',
          'use',
          'remove',
          'parse',
          'register',
          'calc',
          'on',
          'add',
          'subtract',
          'init',
          'load',
          'use',
          'handle',
          'open',
          'fetch',
          'trans',
          'delete',
          'check',
          'move',
          'scrollTo',
          'put',
          'expire',
          'refetch',
          'reset',
        ],
      },
      {
        selector: ['function'],
        filter: {
          regex: 'middleware',
          match: false,
        },
        format: ['PascalCase'],
        suffix: [
          'Screen',
          'Comp',
          'Svg',
          'Nav',
          'Navigator',
          'Image',
          'Style',
          'Api',
          'Function',
          'Button',
          'TabBar',
          'Icon',
          'Input',
          'View',
          'Component',
          'Template',
          'List',
          'App',
          'BottomSheet',
        ],
      },
      {
        selector: ['variable'],
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
        filter: {
          regex: '.*',
          match: true,
        },
      },
      {
        selector: ['variable'],
        types: ['boolean'],
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
        filter: {
          regex: '.*',
          match: true,
        },
        prefix: ['is'],
      },
      {
        selector: ['interface'],
        format: ['PascalCase'],
        filter: {
          regex: '.*',
          match: true,
        },
        suffix: ['Props', 'Response', 'Schema', 'Info', 'Message', 'Theme', 'Store', 'State', 'List', 'Params', 'Data'],
      },
      {
        selector: ['parameter', 'classProperty'],
        filter: {
          regex: '.*',
          match: true,
        },
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: ['typeProperty'],
        filter: {
          regex: '.*',
          match: true,
        },
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
      },
      {
        selector: ['class'],
        format: ['PascalCase'],
        suffix: ['Class', 'Api'],
      },
    ],
  },
}
